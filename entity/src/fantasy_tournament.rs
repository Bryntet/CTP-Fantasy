//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize)]
#[sea_orm(table_name = "fantasy_tournament")]
#[serde(rename_all = "PascalCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub owner: i32,
    pub max_picks_per_user: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::competition_in_fantasy_tournament::Entity")]
    CompetitionInFantasyTournament,
    #[sea_orm(has_many = "super::fantasy_pick::Entity")]
    FantasyPick,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Owner",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(has_many = "super::user_in_fantasy_tournament::Entity")]
    UserInFantasyTournament,
}

impl Related<super::competition_in_fantasy_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CompetitionInFantasyTournament.def()
    }
}

impl Related<super::fantasy_pick::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FantasyPick.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::user_in_fantasy_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserInFantasyTournament.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
