//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize)]
#[sea_orm(table_name = "competition_in_fantasy_tournament")]
#[serde(rename_all = "PascalCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub competition_id: i32,
    pub fantasy_tournament_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::competition::Entity",
        from = "Column::CompetitionId",
        to = "super::competition::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Competition,
    #[sea_orm(
        belongs_to = "super::fantasy_tournament::Entity",
        from = "Column::FantasyTournamentId",
        to = "super::fantasy_tournament::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    FantasyTournament,
}

impl Related<super::competition::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Competition.def()
    }
}

impl Related<super::fantasy_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FantasyTournament.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
