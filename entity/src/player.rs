//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::Deserialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize)]
#[sea_orm(table_name = "player")]
#[serde(rename_all = "PascalCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub pdga_number: i32,
    pub first_name: String,
    pub last_name: String,
    pub rating: Option<i32>,
    pub avatar: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::fantasy_pick::Entity")]
    FantasyPick,
    #[sea_orm(
        belongs_to = "super::player_division::Entity",
        from = "Column::PdgaNumber",
        to = "super::player_division::Column::PlayerPdgaNumber",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PlayerDivision,
    #[sea_orm(has_many = "super::player_in_tournament::Entity")]
    PlayerInTournament,
}

impl Related<super::fantasy_pick::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FantasyPick.def()
    }
}

impl Related<super::player_division::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayerDivision.def()
    }
}

impl Related<super::player_in_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayerInTournament.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::fantasy_pick::Entity")]
    FantasyPick,
    #[sea_orm(entity = "super::player_division::Entity")]
    PlayerDivision,
    #[sea_orm(entity = "super::player_in_tournament::Entity")]
    PlayerInTournament,
}
