//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub admin: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::fantasy_pick::Entity")]
    FantasyPick,
    #[sea_orm(has_many = "super::fantasy_tournament::Entity")]
    FantasyTournament,
    #[sea_orm(has_many = "super::player_trade::Entity")]
    PlayerTrade,
    #[sea_orm(has_many = "super::user_authentication::Entity")]
    UserAuthentication,
    #[sea_orm(has_many = "super::user_competition_score_in_fantasy_tournament::Entity")]
    UserCompetitionScoreInFantasyTournament,
    #[sea_orm(has_many = "super::user_cookies::Entity")]
    UserCookies,
    #[sea_orm(has_many = "super::user_in_fantasy_tournament::Entity")]
    UserInFantasyTournament,
}

impl Related<super::fantasy_pick::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FantasyPick.def()
    }
}

impl Related<super::fantasy_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FantasyTournament.def()
    }
}

impl Related<super::player_trade::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayerTrade.def()
    }
}

impl Related<super::user_authentication::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserAuthentication.def()
    }
}

impl Related<super::user_competition_score_in_fantasy_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserCompetitionScoreInFantasyTournament.def()
    }
}

impl Related<super::user_cookies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserCookies.def()
    }
}

impl Related<super::user_in_fantasy_tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserInFantasyTournament.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
